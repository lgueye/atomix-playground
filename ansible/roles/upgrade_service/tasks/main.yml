---

# install os packages
- name: 'install os packages'
  package: name="{{ item }}" state='present'
  with_items:
  - 'curl'
  - 'vim'
  - 'haveged'
  - 'openjdk-8-jre'

# handle cockroach certificates for jvm
- name: 'transform {{ remote_revision_path }}/certs/client.{{ cockroach_user}}.key into {{ remote_revision_path }}/certs/client.{{ cockroach_user}}.pk8'
  shell: "cd {{ remote_revision_path }}/certs && openssl pkcs8 -topk8 -inform PEM -outform DER -in client.{{ cockroach_user}}.key -out client.{{ cockroach_user}}.pk8 -nocrypt"

# upgrade service
- name: "stop {{ servicename }}"
  service: name="{{ servicename }}" state='stopped'
  ignore_errors: 'yes'

- name: "unlink {{ remote_root_path }} (old revision)"
  file: state='absent' dest="{{ remote_root_path }}"
  ignore_errors: 'yes'

- name: 'link {{ remote_revision_path }} to {{ remote_root_path }} (new revision)'
  file: state='link' src="{{ remote_revision_path }}" dest='{{ remote_root_path }}'

- name: 'interpolate {{ remote_revision_path }}/logback.xml config (new revision)'
  template: src="logback.xml.j2" dest="{{ remote_revision_path }}/logback.xml"

- name: 'interpolate {{ remote_revision_path }}/{{ servicename }}.properties config (new revision)'
  template: src="{{ servicename }}.properties.j2" dest="{{ remote_revision_path }}/{{ servicename }}.properties"

- name: 'interpolate {{ servicename }}.service'
  template: src='{{ servicename }}.service.j2' dest="/etc/systemd/system/{{ servicename }}.service"

- name: "reload systemd"
  command: systemctl daemon-reload

- name: "enable and start {{ servicename }}"
  service: name="{{ servicename }}" enabled='yes' state='restarted'

- name: "wait for port {{ serviceport }} to be available"
  wait_for: port="{{ serviceport }}" delay='1' timeout="{{ service_startup_timeout }}"

# register service in consul
- name: 'deply consul service definition {{ servicename }}.json.j2 to {{ consul_config_dir }}/client/{{ servicename }}.json'
  template: src='{{ servicename }}.json.j2' dest="{{ consul_config_dir }}/client/{{ servicename }}.json"
  when: register_service == true

- name: "restart consul.service"
  service: name="consul" state='restarted'
  when: register_service == true

- name: "wait for port consul_ports.http to be available"
  wait_for: port="{{ consul_ports.http }}" delay='1' timeout="{{ service_startup_timeout }}"
  when: register_service == true
