---

- name: "create {{ cockroachdb_product }} important dirs"
  file: state='directory' path="{{ item }}"
  with_items:
  - "{{ cockroachdb_data_dir }}"
  - "{{ cockroachdb_pid_dir }}"
  - "{{ cockroachdb_log_dir }}"

- name: "create {{ cockroachdb_product }} important dirs"
  file: state='directory' path="{{ item }}"
  when: cockroachdb_security_mode == 'secure'
  with_items:
  - "{{ cockroachdb_remote_install_dir }}/certs"

- name: "stop {{ cockroachdb_product }} service"
  service: name="{{ cockroachdb_product }}" state='stopped'
  ignore_errors: 'yes'

- name: "unlink {{ cockroachdb_product }} older older revision from {{ cockroachdb_home }}/{{ cockroachdb_product }}"
  file: state='absent' dest="{{ cockroachdb_home }}/{{ cockroachdb_product }}"
  ignore_errors: 'yes'

- name: "link {{ cockroachdb_home }}/{{ cockroachdb_version }}/{{ cockroachdb_product }} to {{ cockroachdb_home }}/{{ cockroachdb_product }}"
  file: state='link' src="{{ cockroachdb_home }}/{{ cockroachdb_version }}/{{ cockroachdb_product }}" dest="{{ cockroachdb_home }}/{{ cockroachdb_product }}"

- name: "unlink {{ cockroachdb_product }}/certs older older revision from {{ cockroachdb_home }}/certs"
  file: state='absent' dest="{{ cockroachdb_home }}/certs"
  ignore_errors: 'yes'

- name: "link {{ cockroachdb_home }}/{{ cockroachdb_version }}/certs to {{ cockroachdb_home }}/certs"
  file: state='link' src="{{ cockroachdb_home }}/{{ cockroachdb_version }}/certs" dest="{{ cockroachdb_home }}/certs"
  when: cockroachdb_security_mode == 'secure'

- name: "extrapolate {{ cockroachdb_security_mode }}.service.j2 to /etc/systemd/system/{{ cockroachdb_product }}.service"
  template: src="{{ cockroachdb_security_mode }}.service.j2" dest="/etc/systemd/system/{{ cockroachdb_product }}.service"

- name: "reload systemd"
  command: systemctl daemon-reload

- name: "enable and start {{ cockroachdb_product }}.service"
  service: name="{{ cockroachdb_product }}" enabled='yes' state='restarted'

- name: "wait for port cockroachdb_ports.server to be available"
  wait_for: host="{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}" port="{{ cockroachdb_ports.server }}" delay='1' timeout="{{ service_startup_timeout }}"

- name: "wait for port cockroachdb_ports.http to be available"
  wait_for: host="{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}" port="{{ cockroachdb_ports.http }}" delay='1' timeout="{{ service_startup_timeout }}"

- name: "deploy {{ cockroachdb_product }} service definition {{ cockroachdb_product }}.json.j2 to {{ consul_config_dir }}/client/{{ cockroachdb_product }}.json"
  template: src="{{ cockroachdb_product }}.json.j2" dest="{{ consul_config_dir }}/client/{{ cockroachdb_product }}.json"

- name: "restart {{ consul_product }}.service"
  service: name="{{ consul_product }}" state='restarted'

- name: "wait for port {{ consul_ports.http }} to be available"
  wait_for: port="{{ consul_ports.http }}" delay='1' timeout="{{ service_startup_timeout }}"
